<project name="javaservicetemplate" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!--  Default folders to be used  -->
	<property name="jar.main.class" value="org.javaservicetemplate.core.Main" />
	<property name="src.dir" value="${basedir}/src/main/java" />
	<property name="test.dir" value="${basedir}/src/main/test" />
	<property name="resource.dir" value="${basedir}/src/main/resource" />

	<property name="bin.dir" value="${basedir}/bin" />
	<property name="bin.classes.dir" value="${bin.dir}/classes" />
	<property name="bin.test.dir" value="${bin.dir}/tests" />
	<property name="bin.emma.dir" value="${bin.dir}/emma" />
	<property name="bin.lib.dir" value="${bin.dir}/lib" />

	<property name="out.dir" value="${basedir}/dist" />
	<property name="metrics.dir" value="${out.dir}/metrics" />
	<property name="jar.file" value="${out.dir}/javaservicetemplate.jar" />
	<property name="junit.dir" value="${metrics.dir}/junit" />
	<property name="emma.dir" value="${metrics.dir}/emma" />
	<property name="pmd.dir" value="${metrics.dir}/pmd" />
	<property name="cpd.file.name" value="${pmd.dir}/cpd_pmd.xml" />
	<property name="cpd.file.formatter" value="${resource.dir}/cpdhtml.xslt" />
	<property name="cpd.report.file" value="${pmd.dir}/cpd_pmd.html" />
	<property name="ivy.jar.dir" value="${user.home}/.ant/lib" />

	<!-- Defining classpath project-->
	<path id="project.classpath">
		<pathelement location="${bin.classes.dir}" />
	</path>

	<!-- Verify if ivy.jar in available in the ant plugins directory -->
	<target name="check-ivy-jar">
		<condition property="ivy.not.available">
			<not>
				<available file="${ivy.jar.dir}/ivy.jar" />
			</not>
		</condition>
	</target>

	<!-- If ivy.jar isn't available download it from maven repository -->
	<target name="ivy-download" depends="check-ivy-jar" if="ivy.not.available" description="Used to install the ivy task jar">
		<mkdir dir="${ivy.jar.dir}" />
		<get dest="${ivy.jar.dir}/ivy.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.3.0/ivy-2.3.0.jar" />
	</target>

	<!-- Put ivy.jar in classpath -->
	<target name="resolve-ivy" depends="ivy-download">
		<path id="project.classpath">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="project.classpath"/>
		<ivy:cachepath conf="dev" pathid="project.classpath" />
	</target>

	<target name="resolve-tasks" depends="resolve-ivy">
		<taskdef resource="emma_ant.properties" classpathref="project.classpath" />
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpathref="project.classpath" />
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="project.classpath" />
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="project.classpath" />
	</target>

	<!-- Initialize(delete/create) all directories to be used -->
	<target name="clean" depends="resolve-tasks">
		<delete dir="${bin.dir}" />
		<delete dir="${out.dir}" />
		<mkdir dir="${bin.dir}" />
		<mkdir dir="${bin.classes.dir}" />
		<mkdir dir="${bin.test.dir}" />
		<mkdir dir="${bin.emma.dir}" />
		<mkdir dir="${out.dir}" />
		<mkdir dir="${metrics.dir}" />
		<mkdir dir="${emma.dir}" />
		<mkdir dir="${pmd.dir}" />
		<mkdir dir="${junit.dir}" />
		<mkdir dir="${bin.lib.dir}" />
	</target>

	<!-- Compile the current source code -->
	<target name="compile" depends="clean">
		<javac debug="on" srcdir="${src.dir}" destdir="${bin.classes.dir}" encoding="UTF-8">
			<classpath refid="project.classpath" />
		</javac>
		<copy todir="${bin.classes.dir}">
			<fileset dir="${resource.dir}" />
			<fileset file="${basedir}/*.properties" />
		</copy>
	</target>

	<!-- Compile the test source control -->
	<target name="compile-tests" depends="compile">
		<copy todir="${bin.test.dir}">
			<fileset dir="${bin.classes.dir}" />
		</copy>
		<javac debug="on" srcdir="${test.dir}" destdir="${bin.test.dir}" encoding="UTF-8">
			<classpath refid="project.classpath" />
		</javac>
	</target>

	<!-- compile-emma all classes using Emma plugin -->
	<target name="compile-emma" depends="compile-tests">
		<emma>
			<instr instrpath="${bin.test.dir}" destdir="${bin.emma.dir}" metadatafile="${bin.emma.dir}/metadata.emma" merge="false" mode="fullcopy" />
		</emma>
		<copy todir="${bin.emma.dir}">
			<fileset dir="${resource.dir}" />
			<fileset file="${basedir}/*.properties" />
		</copy>
	</target>

	<!-- Run suite case tests -->
	<target name="tests" depends="compile-emma">
		<junit haltonfailure="false" haltonerror="false" fork="true" printsummary="yes" failureproperty="unit.test.failure">
			<classpath>
				<pathelement location="${bin.emma.dir}/classes" />
				<path refid="project.classpath" />
			</classpath>
			<formatter type="xml" />
			<jvmarg value="-Demma.coverage.out.file=${bin.emma.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=false" />
			<batchtest fork="yes" todir="${junit.dir}">
				<fileset dir="${bin.test.dir}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${junit.dir}">
			<fileset dir="${junit.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.dir}" />
		</junitreport>
		<fail message="At least one unit test has failed" if="unit.test.failure" />
	</target>

	<!-- Generate code coverage metrics -->
	<target name="emma" depends="tests">
		<emma>
			<report sourcepath="${src.dir}" sort="+block,+name,+method,+class" metrics="method:70,block:80,line:80,class:100" encoding="UTF-8">
				<fileset dir="${bin.emma.dir}">
					<include name="*.emma" />
				</fileset>
				<xml outfile="${emma.dir}/coverage.xml" depth="method" />
				<html outfile="${emma.dir}/index.html" depth="method" columns="name,class,method,block,line" />
			</report>
		</emma>
	</target>

	<!-- Check for code smell-->
	<target name="pmd">
		<pmd rulesetfiles="rulesets/favorites.xml" encoding="UTF-8">
			<formatter type="net.sourceforge.pmd.renderers.HTMLRenderer" toFile="${pmd.dir}/pmd.html" />
			<formatter type="net.sourceforge.pmd.renderers.SummaryHTMLRenderer" toFile="${pmd.dir}/pmd.html" />
			<formatter type="net.sourceforge.pmd.renderers.VBHTMLRenderer" toFile="${pmd.dir}/pmd_vb.html" />
			<formatter type="net.sourceforge.pmd.renderers.XMLRenderer" toFile="${pmd.dir}/pmd_xml.xml" />
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
	</target>

	<!-- Check for duplication code -->
	<target name="cpd">
		<cpd minimumTokenCount="30" outputFile="${cpd.file.name}" format="xml">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</cpd>
		<xslt in="${cpd.file.name}" style="${cpd.file.formatter}" out="${cpd.report.file}" />
	</target>


	<target name="clone-libs" depends="clean">
		<ivy:retrieve conf="deploy" pattern="${bin.lib.dir}/[type]/[artifact]-[revision].[ext]" sync="true" />
	</target>

	<!-- Compress the app and generate the war file -->
	<target name="jar" depends="compile,tests,emma,pmd,cpd,clone-libs">
		<jar destfile="${jar.file}" compress="true">
			<zipgroupfileset dir="${bin.lib.dir}" includes="*/**.jar" />

			<fileset dir="${bin.classes.dir}" />
			<manifest>
				<attribute name="Main-Class" value="${jar.main.class}" />
			</manifest>
		</jar>
		<copy todir="${out.dir}">
			<fileset file="${basedir}/*.properties" excludes="junit*.properties" />
		</copy>
	</target>

</project>